{
  "rules": {
    "defaultPizza": {
      ".read": "true",
      ".write": "auth !== null && root.child('users/' + auth.uid + '/admin').val() === true",
      "$itemCat": {
        "$itemType": {
          // itemCategory object keys are valid itemTypes
          ".validate": "root.child('itemType/' + $itemType).exists()"
        },
        // keys are valid itemCategories, other than name and cost
        // exclusive itemCategories has a string value that is a valid itemType
        // inclusive itemCategories have an object value
        ".validate": "$itemCat === 'cost' || $itemCat === 'name' ||
        (root.child('itemCat/' + $itemCat).exists() && (
        (newData.isString() && root.child('itemCat/' + $itemCat + '/exclusive').val() === true && root.child('itemType/' + newData.val()).exists()) ||
        (!newData.isString() && root.child('itemCat/' + $itemCat + '/exclusive').val() !== true)))"
      }
    },
    "globals": {
      ".read": "true",
      ".write": "auth !== null && root.child('users/' + auth.uid + '/admin').val() === true",
      "taxRate": {
        ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 1"
      }
    },
    "itemCat": {
      ".read": "true",
      ".write": "auth !== null && root.child('users/' + auth.uid + '/admin').val() === true",
      "$itemCat": {
        "exclusive": {
          ".validate": "newData.isBoolean()"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length <= 120"
        }
      }
    },
    "itemType": {
      ".read": "true",
      ".write": "auth !== null && root.child('users/' + auth.uid + '/admin').val() === true",
      ".indexOn": ["cat"],
      "$itemType": {
        "cat": {
          ".validate": "root.child('itemCat/' + newData.val()).exists()"
        },
        "cost": {
          ".validate": "newData.isNumber()"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length <= 120"
        }
      }
    },
    "orders": {
      "$order": {
        ".read": "auth !== null && (data.child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
        "address": {
          ".write": "auth !== null && (!data.exists() || data.parent().child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
          "city": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "line1": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "line2": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "state": {
            ".validate": "newData.isString() && newData.val().matches(/^(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)$/)"
          },
          "zip": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99999"
          }
        },
        "cost": {
          ".write": "auth !== null && root.child('users/' + auth.uid + '/admin').val() === true",
          ".validate": "newData.isNumber()"
        },
        "createdAt": {
          ".write": "auth !== null && (!data.exists() || data.parent().child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
          ".validate": "newData.isString() && newData.val().matches(/^(19|20)[0-9][0-9]-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[tT]([0-5][0-9]):([0-5][0-9]):([0-5][0-9])$/)"
        },
        "delivery": {
          ".write": "auth !== null && (!data.exists() || data.parent().child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
          ".validate": "newData.isBoolean()"
        },
        "payment": {
          ".write": "auth !== null && (!data.exists() || data.parent().child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
          "name": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "number": {
            "bank": {
              ".validate": "newData.parent().parent().child('type').val() === 'check' && newData.isNumber() && newData.val() <= 999999999 && newData.val() >= 0"
            },
            "card": {
              ".validate": "newData.parent().parent().child('type').val() === 'card' && newData.isString() && newData.val().matches(/^([0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4})|([0-9]{16})$/)"
            },
            "cvc": {
              ".validate": "newData.parent().parent().child('type').val() === 'card' && newData.isNumber() && newData.val() <= 9999 && newData.val() >= 100"
            },
            "expiration": {
              "month": {
                ".validate": "newData.isNumber() && newData.val() <= 12 && newData.val() >= 1"
              },
              "year": {
                ".validate": "newData.isNumber() && newData.val() <= 99 && newData.val() >= 0"
              },
              ".validate": "newData.parent().parent().child('type').val() === 'card'"
            },
            "routing": {
              ".validate": "newData.parent().parent().child('type').val() === 'check' && newData.isNumber() && newData.val() <= 99999999999999999 && newData.val() >= 0"
            }
          },
          "type": {
            ".validate": "newData.isString() && (newData.val() === 'cash' || newData.val() === 'card' || newData.val() === 'check')"
          }
        },
        "pizzas": {
          ".write": "auth !== null && (!data.exists() || data.parent().child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
          "$pizza": {
            "$itemCat": {
              "cost": {
                ".validate": "newData.isNumber()"
              },
              "name": {
                ".validate": "newData.isString() && newData.val().length < 100"
              },
              "$itemType": {
                // itemCategory object keys are valid itemTypes
                ".validate": "root.child('itemType/' + $itemType).exists()"
              },
              // keys are valid itemCategories, other than name and cost
              // exclusive itemCategories has a string value that is a valid itemType
              // inclusive itemCategories have an object value
              ".validate": "$itemCat === 'cost' || $itemCat === 'name' ||
              (root.child('itemCat/' + $itemCat).exists() && (
              (newData.isString() && root.child('itemCat/' + $itemCat + '/exclusive').val() === true && root.child('itemType/' + newData.val()).exists()) ||
              (!newData.isString() && root.child('itemCat/' + $itemCat + '/exclusive').val() !== true)))"
            }
          }
        },
        "total": {
          ".write": "auth !== null && root.child('users/' + auth.uid + '/admin').val() === true",
          ".validate": "newData.isNumber()"
        }
      }
    },
    "payMethods": {
      "$payMethod": {
        ".read": "auth !== null && (data.child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
        ".write": "auth !== null && (!data.exists() || data.child('user').val() === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
        "name": {
          ".validate": "newData.isString() && newData.val().length <= 240"
        },
        "number": {
          "bank": {
            ".validate": "newData.parent().parent().child('type').val() === 'check' && newData.isNumber() && newData.val() <= 999999999 && newData.val() >= 0"
          },
          "card": {
            ".validate": "newData.parent().parent().child('type').val() === 'card' && newData.isString() && newData.val().matches(/^([0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4})|([0-9]{16})$/)"
          },
          "cvc": {
            ".validate": "newData.parent().parent().child('type').val() === 'card' && newData.isNumber() && newData.val() <= 9999 && newData.val() >= 100"
          },
          "expiration": {
            "month": {
              ".validate": "newData.isNumber() && newData.val() <= 12 && newData.val() >= 1"
            },
            "year": {
              ".validate": "newData.isNumber() && newData.val() <= 99 && newData.val() >= 0"
            },
            ".validate": "newData.parent().parent().child('type').val() === 'card'"
          },
          "routing": {
            ".validate": "newData.parent().parent().child('type').val() === 'check' && newData.isNumber() && newData.val() <= 99999999999999999 && newData.val() >= 0"
          }
        },
        "type": {
          ".validate": "newData.isString() && (newData.val() === 'cash' || newData.val() === 'card' || newData.val() === 'check')"
        }
      }
    },
    "users": {
      "$user": {
        ".read": "auth !== null && ($user === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
        ".write": "auth !== null && ($user === auth.uid || root.child('users/' + auth.uid + '/admin').val() === true)",
        "activeOrder": {
          ".validate": "root.child('orders/' + newData.val()).exists()"
        },
        "address": {
          "city": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "line1": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "line2": {
            ".validate": "newData.isString() && newData.val().length <= 240"
          },
          "state": {
            ".validate": "newData.isString() && newData.val().matches(/^(NH)|(NJ)|(NM)|(NY)|(NC)(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)$/)"
          },
          "zip": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99999"
          }
        }
      }
    }
  }
}
